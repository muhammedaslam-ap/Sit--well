<%- include('../../views/partials/user/header.ejs') %>

<style>
    .quantity-display {
        width: 40px;
        text-align: center;
        border: none;
        font-size: 16px;
        background-color: transparent;
        font-weight: bold;
        color: #333;
        outline: none;
        cursor: default;
    }
    
    .quantity-btn {
        width: 30px;
        height: 30px;
        background-color: #f8f9fa;
        border: 1px solid #ced4da;
        font-size: 18px;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }
    
    .quantity-btn:hover {
        background-color: #e9ecef;
    }
</style>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<% if (successMessage && successMessage.length) { %>
    <script>
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'success',
            title: '<%= successMessage %>',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            background: 'linear-gradient(90deg, #56ab2f, #a8e063)', /* Gradient Background */
            customClass: {
                popup: 'custom-swal-toast',
            },
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer);
                toast.addEventListener('mouseleave', Swal.resumeTimer);
            }
        });
    </script>
<% } %>

<% if (errorMessage && errorMessage.length) { %>
    <script>
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: '<%= errorMessage %>',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            background: 'linear-gradient(90deg, #ff416c, #ff4b2b)', /* Gradient Background */
            customClass: {
                popup: 'custom-swal-toast',
            },
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer);
                toast.addEventListener('mouseleave', Swal.resumeTimer);
            }
        });
    </script>
<% } %>
<section class="cart_area py-5 mt-5">
    <div class="container">
        <div class="cart_inner">
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Product</th>
                            <th scope="col">Price</th>
                            <th scope="col">Quantity</th>
                            <th scope="col">Total</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        <% let cartTotal = 0; %>
                        <% cart.items.forEach(item => { %>
                            <% cartTotal += item.totalPrice; %>
                            <tr id="cart-item-<%= item.productId %>">
                                <td>
                                    <div class="media">
                                        <div class="d-flex mr-3">
                                            <img src="/uploads/product-images/<%=item.productImage %>" 
                                                 alt="<%= item.productName %>"
                                                 class="img-fluid" style="width: 100px; height: 100px; object-fit: cover;" />
                                        </div>
                                        <div class="media-body">
                                            <p class="mb-0"><%= item.productName %></p>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <h5 class="item-price">₹<%= item.price.toFixed(2) %></h5>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <input type="text" value="<%= item.quantity %>" 
                                            id="qty-<%= item.productId %>" readonly class="quantity-display">
                                        <button onclick="incrementQuantity('<%= item.productId %>')" class="quantity-btn rounded-circle ml-2">+</button>
                                        <button onclick="decrementQuantity('<%= item.productId %>')" class="quantity-btn rounded-circle ml-2">-</button>
                                    </div>
                                </td>
                                <td>
                                    <p class="total-price mb-0">
                                        Total Price: ₹<span class="price-value" id="total-<%= item.productId %>"><%= item.totalPrice.toFixed(2) %></span>
                                    </p>
                                </td>
                                <td>
                                    <button class="btn btn-link text-danger p-0" 
                                            onclick="removeFromCart('<%= item.productId %>')" 
                                            style="font-size: 1.2rem;">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </td>
                            </tr>
                        <% }); %>
                    
                        <!-- Display subtotal -->
                        <tr>
                            <td colspan="3" class="text-right">
                                <h5>Subtotal</h5>
                            </td>
                            <td>
                                <h5 class="cart-subtotal">₹<%= cartTotal.toFixed(2) %></h5>
                            </td>
                            <td></td>
                        </tr>
                    
                        <!-- Continue and Checkout buttons -->
                        <tr>
                            <td colspan="5" class="text-right">
                                <div class="checkout_btn_inner float-right">
                                    <a class="btn btn-secondary mr-2" href="/">Continue Shopping</a>
                                    <a class="btn btn-primary" href="/checkout">Proceed to checkout</a>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

<script>
async function removeFromCart(productId) {
    try {
        const response = await fetch(`/cart/remove`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ productId })
        });

        if (!response.ok) {
            const errorMessage = await response.text();
            throw new Error(errorMessage);
        }

        const result = await response.json();

        if (result.success) {
            const itemRow = document.getElementById(`cart-item-${productId}`);
            if (itemRow) itemRow.remove();

            updateSubtotal();

            Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'warning',
            title: 'Product successfully removed from cart',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
        });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: result.message || 'Could not remove item',
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        console.error('Error removing item:', error.message);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'An error occurred while removing item: ' + error.message, 
            confirmButtonText: 'OK'
        });
    }
}


function updateSubtotal() {
    const cartItems = document.querySelectorAll('.cart-item'); 
    let total = 0;

    cartItems.forEach(item => {
        const priceElement = item.querySelector('.item-price'); 
        const quantityElement = item.querySelector('.item-quantity'); 

        if (priceElement && quantityElement) { 
            const price = parseFloat(priceElement.textContent) || 0;
            const quantity = parseInt(quantityElement.value) || 0;
            total += price * quantity;
        }
    });

    const subtotalElement = document.getElementById('subtotal'); 
    if (subtotalElement) {
        subtotalElement.textContent = total.toFixed(2); 
    } else {
        console.error('Subtotal element not found'); 
    }
}

async function incrementQuantity(productId) {
        const quantityInput = document.getElementById(`qty-${productId}`);
        let newQuantity = parseInt(quantityInput.value) + 1;
        if (newQuantity > 10) {
            Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'warning',
            title: 'You cannot add more than 10 items.',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
        });
            return;
        }
        await updateQuantityOnServer(productId, newQuantity);
    }

    async function decrementQuantity(productId) {
        const quantityInput = document.getElementById(`qty-${productId}`);
        let newQuantity = parseInt(quantityInput.value) - 1;

        if (newQuantity < 1) {
            Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'warning',
            title: 'Quantity cannot be less than 1.',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
        });
            return;
        }
   
   

        await updateQuantityOnServer(productId, newQuantity);
    }

    async function updateQuantityOnServer(productId, newQuantity) {
    try {
        const response = await fetch('/cart/updateQuantity', {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId, quantity: newQuantity }),
        });

        const data = await response.json();

        if (response.ok) {
            updateCartDisplay(productId, data.quantity, data.totalPrice, data.cartTotal);
        } else {
            // Display error as a toast
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'warning',
                title: data.error || 'An error occurred.',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
            });
        }
    } catch (error) {
        console.error('Error updating quantity:', error);
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: 'An error occurred while updating the cart.',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
        });
    }
}



    function updateCartDisplay(productId, newQuantity, itemTotalPrice, cartTotal) {
        document.getElementById(`qty-${productId}`).value = newQuantity;

        document.getElementById(`total-${productId}`).innerText = itemTotalPrice.toFixed(2);

        document.querySelector('.cart-subtotal').innerText = `₹${cartTotal.toFixed(2)}`;
    }

    

</script>

