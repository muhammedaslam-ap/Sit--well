<%- include('../../views/partials/user/profileHeader.ejs') %>

    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @layer utilities {
            .scrollbar-hide::-webkit-scrollbar {
                display: none;
            }
            .scrollbar-hide {
                -ms-overflow-style: none;
                scrollbar-width: none;
            }
        }
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
        .custom-swal-toast {
            border-radius: 10px;
            box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
            color: #ffffff;
            font-family: 'Poppins', sans-serif;
            font-size: 14px;
            padding: 10px 20px;
        }
        .custom-swal-toast .swal2-icon {
            margin-right: 8px;
            font-size: 16px;
        }
        .swal2-toast .swal2-title {
            font-size: 16px;
            font-weight: bold;
            color: #ffffff;
        }

    </style>

<% if (successMessage && successMessage.length) { %>
    <script>
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'success',
            title: '<%= successMessage %>',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            background: 'linear-gradient(90deg, #56ab2f, #a8e063)', /* Gradient Background */
            customClass: {
                popup: 'custom-swal-toast',
            },
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer);
                toast.addEventListener('mouseleave', Swal.resumeTimer);
            }
        });
    </script>
<% } %>

<% if (errorMessage && errorMessage.length) { %>
    <script>
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: '<%= errorMessage %>',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            background: 'linear-gradient(90deg, #ff416c, #ff4b2b)', /* Gradient Background */
            customClass: {
                popup: 'custom-swal-toast',
            },
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer);
                toast.addEventListener('mouseleave', Swal.resumeTimer);
            }
        });
    </script>
<% } %>

</head>
<body class="bg-gray-100 font-sans">
    <div class="min-h-screen bg-gray-100 py-8">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <h2 class="text-3xl font-extrabold text-gray-900 text-center mb-8">My Orders</h2>
          
          <% if (orders.length > 0) { %>
            <div class="space-y-8">
              <% orders.forEach(order => { %>
                <div class="bg-white shadow overflow-hidden sm:rounded-lg">
                  <div class="px-4 py-5 sm:px-6 flex flex-wrap items-center justify-between gap-4 bg-gray-50">
                    <div class="flex-grow">
                      <p class="text-sm font-medium text-gray-500">Order ID: <span class="text-gray-900"><%= order.orderId %></span></p>
                      <p class="mt-1 text-sm text-gray-500">Date: <span class="text-gray-900"><%= order.createdOn ? order.createdOn.toDateString() : 'Date not available' %></span></p>
                    </div>
                    <div class="flex items-center space-x-4">
                      <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full <%= 
                        order.status === 'Pending' ? 'bg-yellow-100 text-yellow-800' :
                        order.status === 'Delivered' ? 'bg-green-100 text-green-800' :
                        order.status === 'Processing' ? 'bg-blue-100 text-blue-800' :
                        order.status === 'Shipped' ? 'bg-indigo-100 text-indigo-800' :
                        order.status === 'Cancelled' ? 'bg-red-100 text-red-800' :
                        order.status === 'Return Request' ? 'bg-gray-100 text-gray-800' :
                        order.status === 'Returned' ? 'bg-purple-100 text-purple-800' : 'bg-gray-100 text-gray-800'
                      %>">
                        <%= order.status %>
                      </span>
                      <div class="text-sm">
                        <p>Payment Status: 
                          <span class="<%= order.paymentStatus == 'failed' ? 'text-red-600' : 'text-green-600' %> font-semibold">
                            <%= order.paymentStatus %>
                          </span>
                        </p>
                        <% if (order.paymentStatus == 'failed' && order.finalAmount>0) { %>
                          <button class="mt-2 bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-2 rounded text-xs" onclick="reTryPayment('<%= order._id %>','<%= order.finalAmount %>')">Try again</button>
                        <% } else if(order.paymentStatus == 'failed' && order.finalAmount == 0) { %>
                          <button class="mt-2 bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-2 rounded text-xs" onclick="reTryPayment('<%= order._id %>','<%= order.totalPrice %>')">Try again</button>
                        <% } %>
                      </div>
                    </div>
                  </div>
                  <div class="border-t border-gray-200">
                    <div class="overflow-x-auto">
                      <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                          <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                          </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                          <% order.orderedItems.forEach(item => { %>
                            <tr>
                              <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex items-center">
                                  <div class="flex-shrink-0 h-10 w-10">
                                    <img class="h-10 w-10 rounded-full" src="/uploads/product-images/<%= item.productImage %>" alt="<%= item.productName %>">
                                  </div>
                                  <div class="ml-4">
                                    <div class="text-sm font-medium text-gray-900"><%= item.product.productName %></div>
                                  </div>
                                </div>
                              </td>
                              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">₹<%= item.price.toFixed(2) %></td>
                              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= item.quantity %></td>
                              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">₹<%= (item.price * item.quantity).toFixed(2) %></td>
                            </tr>
                          <% }) %>
                          <tr class="bg-gray-50">
                            <td colspan="3" class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">Order Total:</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              <% if (order.finalAmount > 0) { %>   
                                <p class="text-green-600">coupon applied</p>
                                ₹<%= order.finalAmount.toFixed(2) %>
                                <p class="text-yellow-600">You saved: ₹<%= (order.totalPrice - order.finalAmount).toFixed(2) %></p>
                              <% } else { %>
                                ₹<%= order.totalPrice.toFixed(2) %>
                              <% } %>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                  <div class="px-4 py-4 sm:px-6 flex flex-wrap justify-between items-center gap-4 bg-gray-50">
                    <% if (order.rejectionMessage) { %>
                      <span class="text-blue-600 font-semibold">The return request has been rejected by Admin <br> Admin apologizes for the inconvenience</span>
                    <% } else if (order.status === 'Delivered') { %>
                      <button id="returnOrderBtn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded transition duration-300 ease-in-out transform hover:-translate-y-1 hover:scale-105" onclick="openReturnModal('<%= order._id %>', '<%= order.orderId %>')">
                        Return Order
                      </button>
                    <% } else { %>
                      <form action="/orderCancel/<%= order._id %>" method="post" onsubmit="return confirmCancel(event)">
                        <% if (order.status === 'Cancelled') { %>
                          <span class="text-red-600 font-semibold">Cancelled</span>
                        <% } else if (order.status === 'Returned') { %>
                          <span class="text-gray-600 font-semibold">Returned</span>
                        <% } else if (order.status === 'Return Request') { %>
                          <span class="text-gray-600 font-semibold">Return Requested</span>
                        <% } else { %>
                          <button type="submit" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded">Cancel Order</button>
                        <% } %>
                      </form>
                    <% } %>
                    <div class="flex space-x-4">
                        <a href="/orderDownloadPdf?orderId=<%= order._id %>" 
                            class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                            title="Download Order PDF">
                           <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                             <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                           </svg>
                           Download as PDF
                         </a>
                         
                      <button type="button" class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" onclick="loadOrderDetails('<%= order._id %>')">
                        View Order Details
                      </button>
                    </div>
                  </div>
                </div>
              <% }) %>
            </div>
          <% } else { %>
            <p class="text-center text-gray-600">You have no orders yet.</p>
          <% } %>
      
    <!-- Return Modal -->
    <div id="returnModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white p-8 rounded-lg shadow-xl max-w-md w-full">
            <h2 class="text-2xl font-bold mb-4">Return Request</h2>
            <form id="returnForm" method="post" action="/returnMessage/" onsubmit="return confirmCancel(event)">
                <div class="mb-4">
                    <label for="orderIdInput" class="block text-sm font-medium text-gray-700">Order ID:</label>
                    <input type="text" id="orderIdInput" name="orderId" readonly class="mt-1 block w-full px-3 py-2 bg-gray-100 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                </div>
                <div class="mb-4">
                    <label for="reason" class="block text-sm font-medium text-gray-700">Reason for Return:</label>
                    <input type="text" id="reason" name="reason" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" placeholder="Enter return reason">
                </div>
                <div class="flex justify-end">
                    <button type="button" onclick="closeReturnModal()" class="mr-2 bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded">Cancel</button>
                    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">Submit Return Request</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Order Details Modal -->
    <div id="orderDetailsModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white p-8 rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold">Order Details</h2>
                <button onclick="closeOrderDetailsModal()" class="text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div id="orderDetailsContent" class="mt-4">
                <!-- Content will be dynamically inserted here -->
            </div>
        </div>
    </div>

    <!-- Pagination -->
    <div class="mt-8 flex justify-center">
        <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
            <!-- Previous Button -->
            <% if (currentPage > 1) { %>
                <a href="?page=<%= currentPage - 1 %>&search=<%= search %>" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                    <span class="sr-only">Previous</span>
                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                </a>
            <% } else { %>
                <span class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400">
                    <span class="sr-only">Previous</span>
                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                </span>
            <% } %>

            <!-- Page Numbers -->
            <% let startPage = Math.max(1, currentPage - 2); %>
            <% let endPage = Math.min(totalPages, currentPage + 2); %>

            <% if (startPage > 1) { %>
                <a href="?page=1&search=<%= search %>" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                    1
                </a>
                <% if (startPage > 2) { %>
                    <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                        ...
                    </span>
                <% } %>
            <% } %>

            <% for (let i = startPage; i <= endPage; i++) { %>
                <% if (i === currentPage) { %>
                    <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-blue-50 text-sm font-medium text-blue-600">
                        <%= i %>
                    </span>
                <% } else { %>
                    <a href="?page=<%= i %>&search=<%= search %>" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                        <%= i %>
                    </a>
                <% } %>
            <% } %>

            <% if (endPage < totalPages) { %>
                <% if (endPage < totalPages - 1) { %>
                    <span class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                        ...
                    </span>
                <% } %>
                <a href="?page=<%= totalPages %>&search=<%= search %>" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50">
                    <%= totalPages %>
                </a>
            <% } %>

            <!-- Next Button -->
            <% if (currentPage < totalPages) { %>
                <a href="?page=<%= currentPage + 1 %>&search=<%= search %>" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                    <span class="sr-only">Next</span>
                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                </a>
            <% } else { %>
                <span class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-gray-100 text-sm font-medium text-gray-400">
                    <span class="sr-only">Next</span>
                    <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                    </svg>
                </span>
            <% } %>
        </nav>
    </div>
</div>
</div>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        function confirmCancel(event) {
            event.preventDefault();
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, ok!'
            }).then((result) => {
                if (result.isConfirmed) {
                    event.target.submit();
                }
            });
        }

        function openReturnModal(orderId, orderIdValue) {
            document.getElementById('returnModal').classList.remove('hidden');
            document.getElementById('returnModal').classList.add('flex');
            document.getElementById('orderIdInput').value = orderIdValue;
            document.getElementById('returnForm').action = `/returnMessage/${orderId}`;
        }

        function closeReturnModal() {
            document.getElementById('returnModal').classList.add('hidden');
            document.getElementById('returnModal').classList.remove('flex');
        }

        function loadOrderDetails(orderId) {
            document.getElementById('orderDetailsModal').classList.remove('hidden');
            document.getElementById('orderDetailsModal').classList.add('flex');
            
            document.getElementById('orderDetailsContent').innerHTML = `
                <div class="flex justify-center items-center h-64">
                    <div class="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
                </div>`;
            
            fetch(`/orderDetails/${orderId}`)
                .then(response => response.json())
                .then(orderDetails => {
                    if (!orderDetails || orderDetails.error) {
                        document.getElementById('orderDetailsContent').innerHTML = `
                            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" role="alert">
                                <p class="font-bold">Error</p>
                                <p>Order not found.</p>
                            </div>`;
                    } else {
                        const address = orderDetails.address.length > 0 ? orderDetails.address[0] : null;
                        
                        document.getElementById('orderDetailsContent').innerHTML = `
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div class="bg-white p-6 rounded-lg shadow-md">
                                    <h3 class="text-lg font-semibold mb-4 text-blue-600">Order Information</h3>
                                    <p class="mb-2"><span class="font-medium">Order Number:</span> ${orderDetails.orderId}</p>
                                    <p class="mb-2"><span class="font-medium">Date:</span> ${new Date(orderDetails.createdOn).toLocaleDateString()}</p>
                                    <p class="mb-2"><span class="font-medium">Total:</span> ₹${(orderDetails.finalAmount > 0) 
                                        ? orderDetails.finalAmount.toFixed(2) 
                                        : orderDetails.totalPrice.toFixed(2)}</p>
                                    <p class="mb-2"><span class="font-medium">Payment Method:</span> ${orderDetails.paymentMethod}</p>
                                </div>
                                <div class="bg-white p-6 rounded-lg shadow-md">
                                    <h3 class="text-lg font-semibold mb-4 text-blue-600">Billing Address</h3>
                                    ${address ? `
                                        <p class="mb-2"><span class="font-medium">Street:</span> ${address.addressLine1}</p>
                                        <p class="mb-2"><span class="font-medium">City:</span> ${address.city}</p>
                                        <p class="mb-2"><span class="font-medium">District:</span> ${address.district}</p>
                                        <p class="mb-2"><span class="font-medium">State:</span> ${address.state}</p>
                                        <p class="mb-2"><span class="font-medium">Postcode:</span> ${address.pinCode}</p>
                                        <p class="mb-2"><span class="font-medium">Phone:</span> ${address.phone}</p>
                                    ` : `
                                        <p class="text-yellow-600">No address information available.</p>
                                    `}
                                </div>
                            </div>
                            <div class="mt-8 bg-white p-6 rounded-lg shadow-md overflow-x-auto">
                                <h3 class="text-lg font-semibold mb-4 text-blue-600">Order Items</h3>
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                        <tr>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
                                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
                                        </tr>
                                    </thead>
                                    <tbody class="bg-white divide-y divide-gray-200">
                                        ${orderDetails.orderedItems.map(item => `
                                            <tr>
                                                <td class="px-6 py-4 whitespace-nowrap">
                                                    <img src="/uploads/product-images/${item.productImage}" alt="${item.productName}" class="h-10 w-10 rounded-full">
                                                </td>
                                                <td class="px-6 py-4 whitespace-nowrap">${item.product.productName}</td>
                                                <td class="px-6 py-4 whitespace-nowrap">₹${item.price.toFixed(2)}</td>
                                                <td class="px-6 py-4 whitespace-nowrap">${item.quantity}</td>
                                                <td class="px-6 py-4 whitespace-nowrap">₹${(item.price * item.quantity).toFixed(2)}</td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>`;
                    }
                })
                .catch(error => {
                    console.error('Error fetching order details:', error);
                    document.getElementById('orderDetailsContent').innerHTML = `
                        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded" role="alert">
                            <p class="font-bold">Error</p>
                            <p>Error loading order details. Please try again later.</p>
                        </div>`;
                });
        }

        function closeOrderDetailsModal() {
            document.getElementById('orderDetailsModal').classList.add('hidden');
            document.getElementById('orderDetailsModal').classList.remove('flex');
        }

        function reTryPayment(orderId, totalAmount) {
            fetch('/paypalPayment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId: orderId, totalAmount: totalAmount})
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.approval_url) {
                        window.location.href = data.approval_url;
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Oops...',
                            text: 'Error initiating PayPal payment. Please try again.',
                        });
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'An unexpected error occurred. Please try again later.',
                    });
                });
        }



        const downloadOrderPdf = async (orderId) => {
            const response = await fetch(`/orderDownloadPdf?orderId=${orderId}`);
            if (response.ok) {
                const blob = await response.blob();
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `order_${orderId}.pdf`;
                document.body.appendChild(a);
                a.click();
                a.remove();
                URL.revokeObjectURL(url);
            } else {
                console.error('Failed to download PDF');
            }
        };

    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

    <%- include('../../views/partials/user/profileFooter.ejs') %>

        
    