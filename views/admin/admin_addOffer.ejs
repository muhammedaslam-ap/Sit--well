<%- include('../../views/partials/admin/header.ejs') %> 

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<% if (successMessage && successMessage.length) { %>
    <script>
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: '<%= successMessage %>',
            confirmButtonText: 'OK'
        });
    </script>
<% } %>
    
<% if (errorMessage && errorMessage.length) { %>
    <script>
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: '<%= errorMessage %>',
            confirmButtonText: 'OK'
        });
    </script>
<% } %>


<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
<link rel="stylesheet" href="styles.css">

<script src="https://cdn.tailwindcss.com"></script>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<style>
    body {
        font-family: 'Inter', sans-serif;
    }
</style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
<div class="container mx-auto p-8">
    <h1 class="text-4xl font-bold mb-8 text-center text-gray-800">Offer Management</h1>
    
    <div class="bg-white shadow-lg rounded-lg overflow-hidden mb-8">
        <div class="p-6">
            <h2 class="text-2xl font-semibold mb-6 text-gray-800">Add New Offer</h2>
            <form action="/admin/addOffer" method="post" id="offerForm" novalidate>
                <!-- Offer Type -->
                <div class="mb-6">
                    <label for="offerType" class="block text-sm font-medium text-gray-700 mb-2">Offer Type</label>
                    <select name="offerType" id="offerType" class="block w-full mt-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" required>
                        <option value="">Select Offer Type</option>
                        <option value="product">Product</option>
                        <option value="category">Category</option>
                    </select>
                    <span class="text-red-500 text-xs mt-1" id="offerTypeError"></span>
                </div>
            
                <!-- Product Name (conditional) -->
                <div class="mb-6" id="productField">
                    <label for="productName" class="block text-sm font-medium text-gray-700 mb-2">Product Name</label>
                    <select name="productName" id="productName" class="block w-full mt-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" required>
                        <option value="">Select a Product</option>
                        <% product.forEach(p => { %>
                            <option value="<%= p._id %>"><%= p.productName %></option>
                        <% }); %>
                    </select>
                    <span class="text-red-500 text-xs mt-1" id="productNameError"></span>
                </div>
            
                <!-- Category Name (conditional) -->
                <div class="mb-6 hidden" id="categoryField">
                    <label for="categoryName" class="block text-sm font-medium text-gray-700 mb-2">Category Name</label>
                    <select name="categoryName" id="categoryName" class="block w-full mt-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                        <option value="">Select a Category</option>
                        <% category.forEach(c => { %>
                            <option value="<%= c._id %>"><%= c.name %></option>
                        <% }); %>
                    </select>
                    <span class="text-red-500 text-xs mt-1" id="categoryNameError"></span>
                </div>
            
                <!-- Discount Percentage -->
                <div class="mb-6">
                    <label for="discountPercentage" class="block text-sm font-medium text-gray-700 mb-2">Discount Percentage</label>
                    <input type="number" name="discountPercentage" id="discountPercentage" class="block w-full mt-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                           required min="0" max="100" placeholder="Enter 0-100" step="1">
                    <span class="text-red-500 text-xs mt-1" id="discountPercentageError"></span>
                </div>
            
                <!-- Valid Until Date -->
                <div class="mb-6">
                    <label for="validUntil" class="block text-sm font-medium text-gray-700 mb-2">Valid Until</label>
                    <input type="date" name="validUntil" id="validUntil" class="block w-full mt-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50" required>
                    <span class="text-red-500 text-xs mt-1" id="validUntilError"></span>
                </div>
            
                <!-- Submit Button -->
                <button type="submit" class="w-full bg-indigo-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-200">Add Offer</button>
            </form>
        </div>
    </div>

    <div class="bg-white shadow-lg rounded-lg overflow-hidden">
        <div class="p-6">
            <h2 class="text-2xl font-semibold mb-6 text-gray-800">Added Offers</h2>
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Offer Type</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Discount</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Valid Until</th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        <% offers.forEach(offer => { %>
                            <tr class="hover:bg-gray-50 transition-colors duration-200">
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= offer.offerType %></td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                    <%= offer.offerType === 'product' ? offer.productName.productName: offer.categoryName.name %>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= offer.discountPercentage %>%</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= offer.endDate.toISOString().split('T')[0] %></td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <button 
                                        class="text-red-600 hover:text-red-900 font-medium"
                                        onclick="deleteOffer('<%= offer._id %>')">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
  async function deleteOffer(offerId) {
  console.log("Deleting offer with ID:", offerId);  

  const result = await Swal.fire({
    title: 'Are you sure?',
    text: 'Do you want to delete this offer? This action cannot be undone!',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, delete it!'
  });

  if (result.isConfirmed) {
    try {
      const response = await fetch(`/admin/deleteOffer?offerId=${offerId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        Swal.fire({
          title: 'Deleted!',
          text: 'The offer has been deleted successfully.',
          icon: 'success',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.reload(); 
        });
      } else {
        const errorData = await response.json();
        Swal.fire({
          title: 'Failed to delete offer',
          text: errorData.message || 'An unknown error occurred.',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    } catch (error) {
      console.error('Error deleting offer:', error);
      Swal.fire({
        title: 'Error',
        text: 'An error occurred while deleting the offer',
        icon: 'error',
        confirmButtonText: 'OK'
      });
    }
  }
}



    
    document.getElementById('offerType').addEventListener('change', function() {
        var productField = document.getElementById('productField');
        var categoryField = document.getElementById('categoryField');
        if (this.value === 'product') {
            productField.classList.remove('hidden');
            categoryField.classList.add('hidden');
        } else {
            productField.classList.add('hidden');
            categoryField.classList.remove('hidden');
        }
    });




    document.addEventListener('DOMContentLoaded', function () {
    const offerForm = document.getElementById('offerForm');
    const offerType = document.getElementById('offerType');
    const productName = document.getElementById('productName');
    const categoryName = document.getElementById('categoryName');
    const discountPercentage = document.getElementById('discountPercentage');
    const price = document.getElementById('price');

    // Show/hide fields based on offer type
    offerType.addEventListener('change', function () {
        const productField = document.getElementById('productField');
        const categoryField = document.getElementById('categoryField');
        if (offerType.value === 'product') {
            productField.classList.remove('hidden');
            categoryField.classList.add('hidden');
            productName.setAttribute('required', 'true');
            categoryName.removeAttribute('required');
        } else if (offerType.value === 'category') {
            categoryField.classList.remove('hidden');
            productField.classList.add('hidden');
            categoryName.setAttribute('required', 'true');
            productName.removeAttribute('required');
        }
    });

    // Validate each field and show error messages
    function validateField(field, messageElementId, message) {
        const messageElement = document.getElementById(messageElementId);
        if (!field.checkValidity()) {
            messageElement.textContent = message;
            field.classList.add('border-red-500');
            return false;
        } else {
            messageElement.textContent = '';
            field.classList.remove('border-red-500');
            return true;
        }
    }

    // Custom validation for discount percentage
    function validateDiscount() {
        return validateField(discountPercentage, 'discountPercentageError', 'Enter a discount between 0 and 100.');
    }

    // Custom validation for price
    function validatePrice() {
        return validateField(price, 'priceError', 'Price must be at least 1.');
    }

    const validUntilInput = document.getElementById('validUntil');
    const today = new Date().toISOString().split('T')[0];
    validUntilInput.setAttribute('min', today);

    // Custom validation for validUntil date
    function validateDate() {
        const validUntilError = document.getElementById('validUntilError');
        const inputDate = new Date(validUntilInput.value); // Convert the input value to a Date object
        const todayDate = new Date(); // Get today's date

        // Remove time part from today's date
        todayDate.setHours(0, 0, 0, 0);

        if (isNaN(inputDate.getTime())) {
            // Check if the inputDate is invalid
            validUntilError.textContent = 'Please enter a valid date.';
            validUntilInput.classList.add('border-red-500');
            return false;
        }

        if (inputDate <= todayDate) {
            validUntilError.textContent = 'Date must be in the future.';
            validUntilInput.classList.add('border-red-500');
            return false;
        } else {
            validUntilError.textContent = '';
            validUntilInput.classList.remove('border-red-500');
            return true;
        }
    }

    // Form submission
    offerForm.addEventListener('submit', function (e) {
        const isOfferTypeValid = validateField(offerType, 'offerTypeError', 'Offer type is required.');
        const isDiscountValid = validateDiscount();
        const isPriceValid = validatePrice();
        const isDateValid = validateDate();

        // Check offerType and validate productName or categoryName accordingly
        let isProductOrCategoryValid = true;
        if (offerType.value === 'product') {
            isProductOrCategoryValid = validateField(productName, 'productNameError', 'Select a product.');
        } else if (offerType.value === 'category') {
            isProductOrCategoryValid = validateField(categoryName, 'categoryNameError', 'Select a category.');
        }

        // Prevent form submission if any validation fails
        if (!isOfferTypeValid || !isDiscountValid || !isPriceValid || !isDateValid || !isProductOrCategoryValid) {
            e.preventDefault();
        }
    });
});




</script>

</body>
    
